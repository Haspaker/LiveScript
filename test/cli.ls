# version
command-eq '-v', ["LiveScript version #{LiveScript.VERSION}"]

# eval print
command-eq '-pe "2 + 2"', [4]

# help
command-eq '-h', [/^Usage: lsc (.|\n)*Misc:(.|\n)*Output control:(.|\n)*Version/]

one-js = 'var f;\nf = function(x){\n  return 1 + x;\n};'
one-path = 'test/data/one.js'

# compile print
command-eq '-cpb --no-header test/data/one.ls', [one-js]

# compile
command-eq '-cb --no-header --debug test/data/one.ls', ['test/data/one.ls => test/data/one.js'], ->
    try
        ok file-exists one-path
        eq one-js, file-read one-path
    finally
        file-delete one-path

# header
command-eq '-cpb test/data/empty.ls', [
    "// Generated by LiveScript #{LiveScript.VERSION}"
]

# no-header
command-eq '-cpb --no-header test/data/empty.ls', [
    ''
]

# not using bare
command-eq '-cp --no-header test/data/empty.ls', [
    '(function(){\n\n}).call(this);'
]

# json
json-content = '{\n  "moo": 1,\n  "foo": "string"\n}'

# implicit json
command-eq '-cp test/data/data.json.ls', [json-content ]

# explicit json
command-eq '-cp --json test/data/data.ls', [json-content]

# eval print json, explicit
command-eq '-je "@two" test/data/j.json', ['4']

# eval print json, implicit
command-eq '-e "@two" test/data/j.json', ['4']
